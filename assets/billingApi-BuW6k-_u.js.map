{"version":3,"file":"billingApi-BuW6k-_u.js","sources":["../../src/services/billingApi.ts"],"sourcesContent":["import axios, { AxiosResponse } from 'axios';\nimport { getAuthToken } from '../hooks/useAuth';\n\nconst apiClient = axios.create({\n  baseURL: import.meta.env.VITE_API_URL || 'http://localhost:3001',\n  withCredentials: true\n});\n\n// Add request interceptor to include auth token\napiClient.interceptors.request.use((config) => {\n  const token = getAuthToken();\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Add response interceptor to handle errors\napiClient.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      // Handle unauthorized error (e.g., redirect to login)\n      console.error('Authentication error:', error);\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Billing API service for Yumi-Series pricing (3x markup for sustainable business)\nexport interface UserBilling {\n  id: number\n  email: string\n  creditsBalance: number // Credits in USD\n  totalSpent: number\n  qwenTokensUsedMonth: number\n  premiumTokensUsedMonth?: number\n\n  subscriptionStatus: 'active' | 'inactive' | 'canceled' | 'past_due'\n  subscriptionPlan: string\n  monthlyTokensUsed?: number\n  dailyTokensUsed?: number\n  premiumTokens?: number\n  credits: number\n  qwenTokensUsed: number\n  qwenTokensLeft?: number\n  premiumTokensLeft?: number\n\n  nextReset: string\n  nextBillingDate?: string\n}\n\nexport interface CreditPackage {\n  id: string\n  name: string\n  credits: number // USD value\n  price: number // Price in cents\n  description: string\n  recommended: boolean\n}\n\nexport interface SubscriptionPlan {\n  id: string\n  name: string\n  price: number // Price in cents\n  tokensPerDay: number\n  tokensPerMonth: number\n  description: string\n  benefits: string[]\n  interval?: string\n}\n\nexport interface ModelPricing {\n  [provider: string]: {\n    [modelId: string]: {\n      inputCost: number // Cost per 1K tokens (3x markup)\n      outputCost: number // Cost per 1K tokens (3x markup)\n      unit: string\n      dailyLimit?: number\n      monthlyLimit?: number\n    }\n  }\n}\n\nexport interface ModelAvailability {\n  available: boolean\n  isFree: boolean\n  reason: string\n  suggestion?: string\n}\n\nexport interface TokenPackage {\n  id: string;\n  name: string;\n  tokens: number;\n  price: number;\n  currency: string;\n  recommended?: boolean;\n}\n\nexport interface PremiumPlan {\n  id: string;\n  name: string;\n  price: number;\n  currency: string;\n  dailyTokens: number;\n  features: string[];\n}\n\nexport interface UserBillingInfo {\n  stripeCustomerId: string;\n  credits: number;\n  subscription: {\n    status: 'active' | 'inactive' | 'cancelled';\n    plan: 'free' | 'pro';\n    nextBillingDate: string;\n  };\n  freeTokensRemaining?: {\n    openai: number;\n    claude: number;\n    qwen: number;\n  };\n  premiumPlanId?: string;\n  premiumPlanExpiresAt?: string;\n  dailyTokensRemaining?: number;\n}\n\nexport interface BillingInfo {\n  tokens: number;\n  dailyTokensRemaining: number;\n  blessingActive: boolean;\n  freeTokensRemaining?: {\n    openai: number;\n    claude: number;\n    qwen: number;\n  };\n}\n\nexport interface PaymentResponse {\n  url: string;\n}\n\ninterface CheckoutResponse {\n  url: string;\n}\n\nexport const billingApi = {\n  getBillingInfo: async (): Promise<BillingInfo> => {\n    try {\n      const response: AxiosResponse<BillingInfo> = await apiClient.get('/api/billing/info');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to fetch billing info:', error);\n      throw error;\n    }\n  },\n\n  async getPackagesAndPlans(): Promise<{\n    packages: TokenPackage[];\n    plans: PremiumPlan[];\n  }> {\n    try {\n      const response = await apiClient.get('/api/billing/packages');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to fetch packages and plans:', error);\n      throw error;\n    }\n  },\n\n  async createStripeCheckout(packageId?: string, planId?: string): Promise<string> {\n    try {\n      const response: AxiosResponse<CheckoutResponse> = await apiClient.post('/api/billing/checkout/stripe', {\n        packageId,\n        planId\n      });\n      return response.data.url;\n    } catch (error) {\n      console.error('Failed to create Stripe checkout:', error);\n      throw new Error('Payment service temporarily unavailable');\n    }\n  },\n\n  async createAlipayCheckout(packageId?: string, planId?: string): Promise<string> {\n    try {\n      const response: AxiosResponse<CheckoutResponse> = await apiClient.post('/api/billing/checkout/alipay', {\n        packageId,\n        planId\n      });\n      return response.data.url;\n    } catch (error) {\n      console.error('Failed to create Alipay checkout:', error);\n      throw new Error('Payment service temporarily unavailable');\n    }\n  },\n\n  async initiatePayment(packageId: string, provider: 'stripe' | 'alipay' = 'stripe'): Promise<PaymentResponse> {\n    try {\n      const response = await apiClient.post('/api/billing/payment', {\n        packageId,\n        provider\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to initiate payment:', error);\n      throw new Error('Payment service temporarily unavailable');\n    }\n  },\n\n  needsTokenPurchase(billingInfo: BillingInfo): boolean {\n    return billingInfo.tokens < 1000;\n  },\n\n  needsPremiumPlan(billingInfo: BillingInfo): boolean {\n    return !billingInfo.blessingActive;\n  },\n\n  getTokensRemaining(billingInfo: BillingInfo, provider?: 'openai' | 'claude' | 'qwen'): number {\n    if (provider && billingInfo.freeTokensRemaining) {\n      return billingInfo.freeTokensRemaining[provider];\n    }\n    return billingInfo.tokens;\n  }\n}; "],"names":["apiClient","axios","create","baseURL","import","withCredentials","interceptors","request","use","config","token","getAuthToken","headers","Authorization","response","error","status","Promise","reject","billingApi","getBillingInfo","get","data","getPackagesAndPlans","createStripeCheckout","packageId","planId","post","url","Error","createAlipayCheckout","initiatePayment","provider","needsTokenPurchase","billingInfo","tokens","needsPremiumPlan","blessingActive","getTokensRemaining","freeTokensRemaining"],"mappings":"gFAGA,MAAMA,EAAYC,EAAMC,OAAO,CAC7BC,QAASC,+BACTC,gBAAiB,EACnB,CAAC,EAGDL,EAAUM,aAAaC,QAAQC,IAAgBC,GAAA,CAC7C,MAAMC,EAAQC,EAAa,EAC3B,OAAID,IACKE,EAAAA,QAAQC,cAAgB,UAAUH,CAAK,IAEzCD,CACT,CAAC,EAGDT,EAAUM,aAAaQ,SAASN,IAC7BM,GAAaA,EACHC,GAAA,OACLA,QAAAA,EAAAA,EAAMD,WAANC,YAAAA,EAAgBC,UAAW,KAErBD,QAAAA,MAAM,wBAAyBA,CAAK,EAEvCE,QAAQC,OAAOH,CAAK,CAC7B,CACF,EAuHO,MAAMI,EAAa,CACxBC,eAAgB,SAAkC,CAC5C,GAAA,CAEF,OAD6C,MAAMpB,EAAUqB,IAAI,mBAAmB,GACpEC,WACTP,EAAO,CACNA,cAAAA,MAAM,gCAAiCA,CAAK,EAC9CA,CAAAA,CAEV,EAEA,MAAMQ,qBAGH,CACG,GAAA,CAEF,OADiB,MAAMvB,EAAUqB,IAAI,uBAAuB,GAC5CC,WACTP,EAAO,CACNA,cAAAA,MAAM,sCAAuCA,CAAK,EACpDA,CAAAA,CAEV,EAEA,MAAMS,qBAAqBC,EAAoBC,EAAkC,CAC3E,GAAA,CAKF,OAJkD,MAAM1B,EAAU2B,KAAK,+BAAgC,CACrGF,UAAAA,EACAC,OAAAA,CAAAA,CACD,GACeJ,KAAKM,UACdb,EAAO,CACNA,cAAAA,MAAM,oCAAqCA,CAAK,EAClD,IAAIc,MAAM,yCAAyC,CAAA,CAE7D,EAEA,MAAMC,qBAAqBL,EAAoBC,EAAkC,CAC3E,GAAA,CAKF,OAJkD,MAAM1B,EAAU2B,KAAK,+BAAgC,CACrGF,UAAAA,EACAC,OAAAA,CAAAA,CACD,GACeJ,KAAKM,UACdb,EAAO,CACNA,cAAAA,MAAM,oCAAqCA,CAAK,EAClD,IAAIc,MAAM,yCAAyC,CAAA,CAE7D,EAEA,MAAME,gBAAgBN,EAAmBO,EAAgC,SAAoC,CACvG,GAAA,CAKF,OAJiB,MAAMhC,EAAU2B,KAAK,uBAAwB,CAC5DF,UAAAA,EACAO,SAAAA,CAAAA,CACD,GACeV,WACTP,EAAO,CACNA,cAAAA,MAAM,8BAA+BA,CAAK,EAC5C,IAAIc,MAAM,yCAAyC,CAAA,CAE7D,EAEAI,mBAAmBC,EAAmC,CACpD,OAAOA,EAAYC,OAAS,GAC9B,EAEAC,iBAAiBF,EAAmC,CAClD,MAAO,CAACA,EAAYG,cACtB,EAEAC,mBAAmBJ,EAA0BF,EAAiD,CACxFA,OAAAA,GAAYE,EAAYK,oBACnBL,EAAYK,oBAAoBP,CAAQ,EAE1CE,EAAYC,MAAAA,CAEvB"}